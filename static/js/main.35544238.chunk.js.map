{"version":3,"sources":["logo.svg","components/randGen/RandomGenerator.jsx","App.js","reportWebVitals.js","index.js"],"names":["randomizeNumber","min","max","Math","floor","random","RandomGenerator","useState","minNum","setMinNum","maxNum","setMaxNum","excludeNums","setExcludeNums","generatedNum","setGeneratedNum","inProgress","setInProgress","Box","display","flexDirection","justifyContent","alignItems","height","m","CircularProgress","size","Typography","variant","Paper","TextField","label","value","onChange","e","target","type","helperText","split","map","num","trim","handleExcludeNums","Button","onClick","minLimit","maxLimit","excludeNumbers","window","alert","excludeNumbersSet","Set","forEach","add","Number","possibleNumbers","i","push","every","has","randomNumber","alreadyChosen","randomGenerator","setTimeout","ml","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35544238.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Box, Button, Card, CircularProgress, Paper, TextField, Typography } from \"@material-ui/core\"\nimport React, { useState } from \"react\"\n\n\nconst randomGenerator = (minLimit = 1, maxLimit = 100, excludeNumbers = []) => {\n  \n  \n\n  let min = Math.floor(minLimit)\n  let max = Math.floor(maxLimit)\n\n  if (min > max) {\n    // let temp = min\n    // min = max\n    // max = temp\n\n    return window.alert(\"You should swap your max and min limits\")\n  }\n\n\n\n\n\n  \n  \n\n  const excludeNumbersSet = new Set()\n  excludeNumbers.forEach((num) => excludeNumbersSet.add(Number(num)))\n\n  const possibleNumbers = []\n\n  for (let i = min; i <= max; i++) {\n    possibleNumbers.push(i)\n  }\n\n  const noPossibleChoices = possibleNumbers.every(num => {\n    return excludeNumbersSet.has(num)\n  })\n\n  if (noPossibleChoices) {\n    return window.alert(\"Your excluded list has every number possible\")\n    \n  }\n\n  // * what if exclude has all the numbers? How do we account for that?\n  // * How do not get stuck in a loop? How can we check that it won't get stuck in a while loop? \n  // * iterate maxLimit with excludeNumbersSet, as soon as it fails then we can continue\n\n  let alreadyChosen = true\n\n  let randomNumber;\n  while (alreadyChosen) {\n    randomNumber = randomizeNumber(min, max)\n    alreadyChosen = excludeNumbersSet.has(randomNumber)\n\n  }\n\n  \n\n  return randomNumber\n\n\n}\n\nfunction randomizeNumber(min = 1, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nfunction RandomGenerator() {\n  const [minNum, setMinNum] = useState(0)\n  const [maxNum, setMaxNum] = useState(100)\n  const [excludeNums, setExcludeNums] = useState([])\n  const [generatedNum, setGeneratedNum] = useState(\"\")\n  const [inProgress, setInProgress] = useState(false)\n\n  const handleExcludeNums = (e) => {\n    \n    \n    if (!e.target.value) {\n      setExcludeNums([])\n    } else {\n      const excludeNums = e.target.value.split(\",\").map((num) => num.trim())\n      setExcludeNums(excludeNums)\n\n    }\n  }\n\n\n  const handleNumGen = () => {\n    \n\n    setInProgress(true)\n    setGeneratedNum(randomGenerator(minNum, maxNum, excludeNums))\n   setTimeout(() => setInProgress(false), 1000)\n  }\n\n  return (\n    \n  \n    <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\" height=\"100%\" m={2}>\n      <Box m={2}>\n      {inProgress ? <CircularProgress size={90}/> : <Typography variant=\"h1\">{generatedNum}</Typography>}  \n      </Box>\n        <Paper>\n        <Box m={2} display=\"flex\" justifyContent=\"center\">\n      <Typography>Random Number Generator</Typography>\n      </Box>\n        <Box m={2} display=\"flex\" justifyContent=\"center\">\n      <TextField label=\"Min Amount (Inclusive)\" variant=\"outlined\" value={minNum} onChange={(e) =>  setMinNum(e.target.value)} type=\"number\"/>\n      </Box>\n        <Box m={2} display=\"flex\" justifyContent=\"center\">\n        <TextField label=\"Max Amount (Inclusive)\" variant=\"outlined\" value={maxNum} onChange={(e) => setMaxNum(e.target.value)}/>\n      </Box>\n        <Box m={2} display=\"flex\" justifyContent=\"center\">\n        <TextField label=\"Numbers to exclude\" helperText=\"Example: 1,2,3\" variant=\"outlined\" value={excludeNums} onChange={(e) => handleExcludeNums(e)}/>\n      </Box>\n      <Box display=\"flex\" justifyContent=\"flex-end\">\n      <Button onClick={handleNumGen}>Generate</Button>\n        </Box>\n\n\n    </Paper>\n    <Box ml={5}>\n\n        \n    </Box>\n      </Box>    \n    \n  )\n\n\n\n  \n}\n\nexport default RandomGenerator","import logo from './logo.svg';\nimport './App.css';\nimport RandomGenerator from \"./components/randGen/RandomGenerator\"\nimport { Box } from '@material-ui/core';\nimport 'fontsource-roboto';\nfunction App() {\n  return (\n    <Box flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\" height=\"100vh\">\n\n\n\n\n        <RandomGenerator/>\n\n    </Box>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}